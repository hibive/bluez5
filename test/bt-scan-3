#!/usr/bin/python

from __future__ import absolute_import, print_function, unicode_literals

from optparse import OptionParser, make_option
import dbus
import dbus.mainloop.glib
try:
  from gi.repository import GObject
except ImportError:
  import gobject as GObject
import bluezutils

devices = {}
adapter = None

def print_info(properties):
	print(" %s %s %d" % (properties["Address"], properties["Alias"], properties["RSSI"]))

def interfaces_added(path, interfaces):
	if not "org.bluez.Device1" in interfaces:
		return
	properties = interfaces["org.bluez.Device1"]
	#print("InterfacesAdded: ")
	#print(properties)
	if not properties:
		return
	if path in devices:
		return
	devices[path] = properties
	# print_info(properties)

def properties_changed(interface, changed, invalidated, path):
	if interface != "org.bluez.Device1":
		return
	#print("PropertiesChanged: ")
	#print(path)
	#print(changed)
	if path in devices:
		dev = devices[path]
		devices[path] = dict(devices[path].items() + changed.items())
		print_info(devices[path])

def property_changed(interface, changed, invalidated, path):
	if interface != "org.bluez.Adapter1":
		return
	quit = False
	if "Discovering" in changed and not changed["Discovering"]:
		quit = True
	if "Discoverable" in changed and not changed["Discoverable"]:
		quit = True
	if quit:
		adapter.StopDiscovery()
		mainloop.quit()

if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

	bus = dbus.SystemBus()

	adapter = bluezutils.find_adapter()

	bus.add_signal_receiver(interfaces_added,
			dbus_interface = "org.freedesktop.DBus.ObjectManager",
			signal_name = "InterfacesAdded")

	bus.add_signal_receiver(properties_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Device1",
			path_keyword = "path")

	bus.add_signal_receiver(property_changed,
			dbus_interface = "org.freedesktop.DBus.Properties",
			signal_name = "PropertiesChanged",
			arg0 = "org.bluez.Adapter1",
			path_keyword = "path")

	# set discoverable
	ad = dbus.Interface(bus.get_object("org.bluez", adapter.object_path), "org.freedesktop.DBus.Properties")
	# powered on
	ad.Set("org.bluez.Adapter1", "Powered", dbus.Boolean(1))
	# set diacoverable timeout
	ad.Set("org.bluez.Adapter1", "DiscoverableTimeout", dbus.UInt32("180")) # 2 minute
	# discoverable on
	ad.Set("org.bluez.Adapter1", "Discoverable", dbus.Boolean(1))

	om = dbus.Interface(bus.get_object("org.bluez", "/"),
			"org.freedesktop.DBus.ObjectManager")
	objects = om.GetManagedObjects()
	for path, interfaces in objects.iteritems():
		if "org.bluez.Device1" in interfaces:
			devices[path] = interfaces["org.bluez.Device1"]

	adapter.StartDiscovery()

	mainloop = GObject.MainLoop()
	mainloop.run()
